#!/usr/bin/env python3
"""
Script de d√©marrage complet pour l'√©cosyst√®me StreamAI int√©gr√©
Lance tous les services n√©cessaires
"""

import subprocess
import sys
import time
import os
import signal
from pathlib import Path
import threading
import requests

class StreamAILauncher:
    def __init__(self):
        self.processes = []
        self.base_dir = Path(__file__).parent
        self.running = True
        
    def print_header(self, title):
        print(f"\n{'='*60}")
        print(f"üöÄ {title}")
        print('='*60)
    
    def print_step(self, step, description):
        print(f"\n{step}. {description}")
        print("-" * 40)
    
    def check_dependencies(self):
        """V√©rifier les d√©pendances"""
        self.print_step("1", "V√©rification des d√©pendances")
        
        # V√©rifier Python
        print(f"‚úÖ Python: {sys.version}")
        
        # V√©rifier Node.js
        try:
            result = subprocess.run(['node', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Node.js: {result.stdout.strip()}")
            else:
                print("‚ùå Node.js non trouv√©")
                return False
        except FileNotFoundError:
            print("‚ùå Node.js non install√©")
            return False
        
        # V√©rifier npm
        try:
            result = subprocess.run(['npm', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ npm: {result.stdout.strip()}")
            else:
                print("‚ùå npm non trouv√©")
                return False
        except FileNotFoundError:
            print("‚ùå npm non install√©")
            return False
        
        return True
    
    def install_python_deps(self):
        """Installer les d√©pendances Python"""
        self.print_step("2", "Installation des d√©pendances Python")
        
        # Le script est d√©j√† dans le dossier obs/
        requirements_file = self.base_dir / "requirements.txt"
        
        if requirements_file.exists():
            print("üì¶ Installation des d√©pendances OBS...")
            try:
                subprocess.run([
                    sys.executable, "-m", "pip", "install", "-r", str(requirements_file)
                ], check=True, cwd=self.base_dir)
                print("‚úÖ D√©pendances Python install√©es")
                return True
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Erreur d'installation Python: {e}")
                return False
        else:
            print("‚ö†Ô∏è Fichier requirements.txt non trouv√©")
            return True
    
    def install_frontend_deps(self):
        """Installer les d√©pendances frontend"""
        self.print_step("3", "Installation des d√©pendances Frontend")
        
        # Le frontend est au niveau parent
        frontend_dir = self.base_dir.parent / "frontend"
        package_json = frontend_dir / "package.json"
        
        if package_json.exists():
            print("üì¶ Installation des d√©pendances npm...")
            try:
                subprocess.run(["npm", "install"], check=True, cwd=frontend_dir)
                print("‚úÖ D√©pendances Frontend install√©es")
                return True
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Erreur d'installation npm: {e}")
                return False
        else:
            print("‚ö†Ô∏è Fichier package.json non trouv√©")
            return False
    
    def start_integrated_server(self):
        """D√©marrer le serveur int√©gr√©"""
        self.print_step("4", "D√©marrage du serveur int√©gr√©")
        
        # Le script est d√©j√† dans le dossier obs/
        start_script = self.base_dir / "start_integrated_server.py"
        
        if start_script.exists():
            print("üîß D√©marrage du serveur d'enregistrement int√©gr√©...")
            try:
                process = subprocess.Popen([
                    sys.executable, str(start_script)
                ], cwd=self.base_dir)
                
                self.processes.append(("Serveur Int√©gr√©", process))
                
                # Attendre que le serveur soit pr√™t
                print("‚è≥ Attente du d√©marrage du serveur...")
                for i in range(30):  # 30 secondes max
                    try:
                        response = requests.get("http://localhost:5002/api/health", timeout=2)
                        if response.status_code == 200:
                            print("‚úÖ Serveur int√©gr√© d√©marr√© sur http://localhost:5002")
                            return True
                    except:
                        pass
                    time.sleep(1)
                
                print("‚ö†Ô∏è Serveur int√©gr√© d√©marr√© mais pas encore pr√™t")
                return True
                
            except Exception as e:
                print(f"‚ùå Erreur de d√©marrage du serveur: {e}")
                return False
        else:
            print("‚ùå Script de d√©marrage non trouv√©")
            return False
    
    def start_frontend(self):
        """D√©marrer le frontend"""
        self.print_step("5", "D√©marrage du frontend")
        
        # Le frontend est au niveau parent
        frontend_dir = self.base_dir.parent / "frontend"
        
        if (frontend_dir / "package.json").exists():
            print("üé® D√©marrage du serveur de d√©veloppement frontend...")
            try:
                process = subprocess.Popen([
                    "npm", "run", "dev"
                ], cwd=frontend_dir)
                
                self.processes.append(("Frontend", process))
                
                # Attendre un peu pour le d√©marrage
                time.sleep(3)
                print("‚úÖ Frontend d√©marr√© sur http://localhost:5173")
                return True
                
            except Exception as e:
                print(f"‚ùå Erreur de d√©marrage du frontend: {e}")
                return False
        else:
            print("‚ùå Projet frontend non trouv√©")
            return False
    
    def run_tests(self):
        """Ex√©cuter les tests"""
        self.print_step("6", "Ex√©cution des tests")
        
        test_script = self.base_dir / "test_integrated_recording.py"
        
        if test_script.exists():
            print("üß™ Ex√©cution des tests d'int√©gration...")
            try:
                # Attendre un peu que tous les services soient pr√™ts
                time.sleep(5)
                
                result = subprocess.run([
                    sys.executable, str(test_script)
                ], cwd=self.base_dir)
                
                if result.returncode == 0:
                    print("‚úÖ Tous les tests sont pass√©s")
                    return True
                else:
                    print("‚ö†Ô∏è Certains tests ont √©chou√© (voir d√©tails ci-dessus)")
                    return False
                    
            except Exception as e:
                print(f"‚ùå Erreur lors des tests: {e}")
                return False
        else:
            print("‚ö†Ô∏è Script de test non trouv√©")
            return True
    
    def print_status(self):
        """Afficher le statut des services"""
        self.print_header("Statut des Services")
        
        print("üåê Services actifs:")
        print("   ‚Ä¢ Serveur Int√©gr√©: http://localhost:5002")
        print("   ‚Ä¢ Frontend React: http://localhost:5173")
        print("   ‚Ä¢ WebSocket: ws://localhost:5002")
        
        print("\nüìã Endpoints principaux:")
        print("   ‚Ä¢ GET  /api/health")
        print("   ‚Ä¢ GET  /api/integrated/status")
        print("   ‚Ä¢ POST /api/integrated/recording/start")
        print("   ‚Ä¢ POST /api/integrated/recording/stop")
        
        print("\nüéØ Utilisation:")
        print("   1. Ouvrir http://localhost:5173 dans votre navigateur")
        print("   2. Aller dans le Dashboard")
        print("   3. Utiliser la section 'Enregistrement Int√©gr√©'")
        print("   4. Configurer OBS Studio avec WebSocket sur port 4455")
        
        print("\n‚öôÔ∏è Configuration OBS:")
        print("   ‚Ä¢ Outils ‚Üí WebSocket Server Settings")
        print("   ‚Ä¢ Enable WebSocket server")
        print("   ‚Ä¢ Server Port: 4455")
        print("   ‚Ä¢ Server Password: (laisser vide)")
    
    def signal_handler(self, signum, frame):
        """Gestionnaire de signal pour arr√™t propre"""
        print(f"\n\nüõë Signal {signum} re√ßu, arr√™t des services...")
        self.running = False
        self.cleanup()
        sys.exit(0)
    
    def cleanup(self):
        """Nettoyer les processus"""
        print("\nüßπ Nettoyage des processus...")
        
        for name, process in self.processes:
            if process.poll() is None:  # Processus encore actif
                print(f"   Arr√™t de {name}...")
                try:
                    process.terminate()
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"   Force l'arr√™t de {name}...")
                    process.kill()
                except:
                    pass
        
        print("‚úÖ Nettoyage termin√©")
    
    def run(self):
        """Ex√©cuter le lanceur complet"""
        self.print_header("StreamAI - Lanceur Int√©gr√©")
        
        # Configurer les gestionnaires de signaux
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # √âtapes de d√©marrage
            steps = [
                ("D√©pendances", self.check_dependencies),
                ("Python Deps", self.install_python_deps),
                ("Frontend Deps", self.install_frontend_deps),
                ("Serveur Int√©gr√©", self.start_integrated_server),
                ("Frontend", self.start_frontend),
                ("Tests", self.run_tests),
            ]
            
            for step_name, step_func in steps:
                if not step_func():
                    print(f"\n‚ùå √âchec de l'√©tape: {step_name}")
                    print("   V√©rifiez les erreurs ci-dessus et r√©essayez")
                    return False
            
            # Afficher le statut
            self.print_status()
            
            # Boucle principale
            print(f"\n{'='*60}")
            print("üéâ Syst√®me StreamAI d√©marr√© avec succ√®s !")
            print("   Appuyez sur Ctrl+C pour arr√™ter tous les services")
            print('='*60)
            
            # Attendre l'arr√™t
            while self.running:
                time.sleep(1)
                
                # V√©rifier si les processus sont encore actifs
                active_processes = []
                for name, process in self.processes:
                    if process.poll() is None:
                        active_processes.append((name, process))
                
                if not active_processes and self.running:
                    print("\n‚ö†Ô∏è Tous les processus se sont arr√™t√©s")
                    break
                
                self.processes = active_processes
            
            return True
            
        except KeyboardInterrupt:
            print("\n\nüõë Arr√™t demand√© par l'utilisateur")
            return True
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue: {e}")
            return False
        finally:
            self.cleanup()

def main():
    """Fonction principale"""
    launcher = StreamAILauncher()
    success = launcher.run()
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
